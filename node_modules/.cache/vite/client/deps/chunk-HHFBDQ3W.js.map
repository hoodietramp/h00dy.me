{
  "version": 3,
  "sources": ["../../../../ufo/dist/index.mjs"],
  "sourcesContent": ["const n = /[^\\0-\\x7E]/;\r\nconst t = /[\\x2E\\u3002\\uFF0E\\uFF61]/g;\r\nconst o = {\r\n  overflow: \"Overflow Error\",\r\n  \"not-basic\": \"Illegal Input\",\r\n  \"invalid-input\": \"Invalid Input\"\r\n};\r\nconst e = Math.floor;\r\nconst r = String.fromCharCode;\r\nfunction s(n2) {\r\n  throw new RangeError(o[n2]);\r\n}\r\nconst c = function(n2, t2) {\r\n  return n2 + 22 + 75 * (n2 < 26) - ((t2 != 0) << 5);\r\n};\r\nconst u = function(n2, t2, o2) {\r\n  let r2 = 0;\r\n  for (n2 = o2 ? e(n2 / 700) : n2 >> 1, n2 += e(n2 / t2); n2 > 455; r2 += 36) {\r\n    n2 = e(n2 / 35);\r\n  }\r\n  return e(r2 + 36 * n2 / (n2 + 38));\r\n};\r\nfunction toASCII(o2) {\r\n  return function(n2, o3) {\r\n    const e2 = n2.split(\"@\");\r\n    let r2 = \"\";\r\n    e2.length > 1 && (r2 = e2[0] + \"@\", n2 = e2[1]);\r\n    const s2 = function(n3, t2) {\r\n      const o4 = [];\r\n      let e3 = n3.length;\r\n      for (; e3--; ) {\r\n        o4[e3] = t2(n3[e3]);\r\n      }\r\n      return o4;\r\n    }((n2 = n2.replace(t, \".\")).split(\".\"), o3).join(\".\");\r\n    return r2 + s2;\r\n  }(o2, function(t2) {\r\n    return n.test(t2) ? \"xn--\" + function(n2) {\r\n      const t3 = [];\r\n      const o3 = (n2 = function(n3) {\r\n        const t4 = [];\r\n        let o4 = 0;\r\n        const e2 = n3.length;\r\n        for (; o4 < e2; ) {\r\n          const r2 = n3.charCodeAt(o4++);\r\n          if (r2 >= 55296 && r2 <= 56319 && o4 < e2) {\r\n            const e3 = n3.charCodeAt(o4++);\r\n            (64512 & e3) == 56320 ? t4.push(((1023 & r2) << 10) + (1023 & e3) + 65536) : (t4.push(r2), o4--);\r\n          } else {\r\n            t4.push(r2);\r\n          }\r\n        }\r\n        return t4;\r\n      }(n2)).length;\r\n      let f = 128;\r\n      let i = 0;\r\n      let l = 72;\r\n      for (const o4 of n2) {\r\n        o4 < 128 && t3.push(r(o4));\r\n      }\r\n      const h = t3.length;\r\n      let p = h;\r\n      for (h && t3.push(\"-\"); p < o3; ) {\r\n        let o4 = 2147483647;\r\n        for (const t4 of n2) {\r\n          t4 >= f && t4 < o4 && (o4 = t4);\r\n        }\r\n        const a = p + 1;\r\n        o4 - f > e((2147483647 - i) / a) && s(\"overflow\"), i += (o4 - f) * a, f = o4;\r\n        for (const o5 of n2) {\r\n          if (o5 < f && ++i > 2147483647 && s(\"overflow\"), o5 == f) {\r\n            let n3 = i;\r\n            for (let o6 = 36; ; o6 += 36) {\r\n              const s2 = o6 <= l ? 1 : o6 >= l + 26 ? 26 : o6 - l;\r\n              if (n3 < s2) {\r\n                break;\r\n              }\r\n              const u2 = n3 - s2;\r\n              const f2 = 36 - s2;\r\n              t3.push(r(c(s2 + u2 % f2, 0))), n3 = e(u2 / f2);\r\n            }\r\n            t3.push(r(c(n3, 0))), l = u(i, a, p == h), i = 0, ++p;\r\n          }\r\n        }\r\n        ++i, ++f;\r\n      }\r\n      return t3.join(\"\");\r\n    }(t2) : t2;\r\n  });\r\n}\r\n\r\nconst HASH_RE = /#/g;\r\nconst AMPERSAND_RE = /&/g;\r\nconst SLASH_RE = /\\//g;\r\nconst EQUAL_RE = /=/g;\r\nconst IM_RE = /\\?/g;\r\nconst PLUS_RE = /\\+/g;\r\nconst ENC_CARET_RE = /%5e/gi;\r\nconst ENC_BACKTICK_RE = /%60/gi;\r\nconst ENC_CURLY_OPEN_RE = /%7b/gi;\r\nconst ENC_PIPE_RE = /%7c/gi;\r\nconst ENC_CURLY_CLOSE_RE = /%7d/gi;\r\nconst ENC_SPACE_RE = /%20/gi;\r\nconst ENC_SLASH_RE = /%2f/gi;\r\nconst ENC_ENC_SLASH_RE = /%252f/gi;\r\nfunction encode(text) {\r\n  return encodeURI(\"\" + text).replace(ENC_PIPE_RE, \"|\");\r\n}\r\nfunction encodeHash(text) {\r\n  return encode(text).replace(ENC_CURLY_OPEN_RE, \"{\").replace(ENC_CURLY_CLOSE_RE, \"}\").replace(ENC_CARET_RE, \"^\");\r\n}\r\nfunction encodeQueryValue(input) {\r\n  return encode(typeof input === \"string\" ? input : JSON.stringify(input)).replace(PLUS_RE, \"%2B\").replace(ENC_SPACE_RE, \"+\").replace(HASH_RE, \"%23\").replace(AMPERSAND_RE, \"%26\").replace(ENC_BACKTICK_RE, \"`\").replace(ENC_CARET_RE, \"^\").replace(SLASH_RE, \"%2F\");\r\n}\r\nfunction encodeQueryKey(text) {\r\n  return encodeQueryValue(text).replace(EQUAL_RE, \"%3D\");\r\n}\r\nfunction encodePath(text) {\r\n  return encode(text).replace(HASH_RE, \"%23\").replace(IM_RE, \"%3F\").replace(ENC_ENC_SLASH_RE, \"%2F\").replace(AMPERSAND_RE, \"%26\").replace(PLUS_RE, \"%2B\");\r\n}\r\nfunction encodeParam(text) {\r\n  return encodePath(text).replace(SLASH_RE, \"%2F\");\r\n}\r\nfunction decode(text = \"\") {\r\n  try {\r\n    return decodeURIComponent(\"\" + text);\r\n  } catch {\r\n    return \"\" + text;\r\n  }\r\n}\r\nfunction decodePath(text) {\r\n  return decode(text.replace(ENC_SLASH_RE, \"%252F\"));\r\n}\r\nfunction decodeQueryKey(text) {\r\n  return decode(text.replace(PLUS_RE, \" \"));\r\n}\r\nfunction decodeQueryValue(text) {\r\n  return decode(text.replace(PLUS_RE, \" \"));\r\n}\r\nfunction encodeHost(name = \"\") {\r\n  return toASCII(name);\r\n}\r\n\r\nfunction parseQuery(parametersString = \"\") {\r\n  const object = {};\r\n  if (parametersString[0] === \"?\") {\r\n    parametersString = parametersString.slice(1);\r\n  }\r\n  for (const parameter of parametersString.split(\"&\")) {\r\n    const s = parameter.match(/([^=]+)=?(.*)/) || [];\r\n    if (s.length < 2) {\r\n      continue;\r\n    }\r\n    const key = decodeQueryKey(s[1]);\r\n    if (key === \"__proto__\" || key === \"constructor\") {\r\n      continue;\r\n    }\r\n    const value = decodeQueryValue(s[2] || \"\");\r\n    if (object[key] === void 0) {\r\n      object[key] = value;\r\n    } else if (Array.isArray(object[key])) {\r\n      object[key].push(value);\r\n    } else {\r\n      object[key] = [object[key], value];\r\n    }\r\n  }\r\n  return object;\r\n}\r\nfunction encodeQueryItem(key, value) {\r\n  if (typeof value === \"number\" || typeof value === \"boolean\") {\r\n    value = String(value);\r\n  }\r\n  if (!value) {\r\n    return encodeQueryKey(key);\r\n  }\r\n  if (Array.isArray(value)) {\r\n    return value.map((_value) => `${encodeQueryKey(key)}=${encodeQueryValue(_value)}`).join(\"&\");\r\n  }\r\n  return `${encodeQueryKey(key)}=${encodeQueryValue(value)}`;\r\n}\r\nfunction stringifyQuery(query) {\r\n  return Object.keys(query).filter((k) => query[k] !== void 0).map((k) => encodeQueryItem(k, query[k])).filter(Boolean).join(\"&\");\r\n}\r\n\r\nconst PROTOCOL_STRICT_REGEX = /^[\\s\\w\\0+.-]{2,}:([/\\\\]{1,2})/;\r\nconst PROTOCOL_REGEX = /^[\\s\\w\\0+.-]{2,}:([/\\\\]{2})?/;\r\nconst PROTOCOL_RELATIVE_REGEX = /^([/\\\\]\\s*){2,}[^/\\\\]/;\r\nconst PROTOCOL_SCRIPT_RE = /^[\\s\\0]*(blob|data|javascript|vbscript):$/i;\r\nconst TRAILING_SLASH_RE = /\\/$|\\/\\?|\\/#/;\r\nconst JOIN_LEADING_SLASH_RE = /^\\.?\\//;\r\nfunction isRelative(inputString) {\r\n  return [\"./\", \"../\"].some((string_) => inputString.startsWith(string_));\r\n}\r\nfunction hasProtocol(inputString, opts = {}) {\r\n  if (typeof opts === \"boolean\") {\r\n    opts = { acceptRelative: opts };\r\n  }\r\n  if (opts.strict) {\r\n    return PROTOCOL_STRICT_REGEX.test(inputString);\r\n  }\r\n  return PROTOCOL_REGEX.test(inputString) || (opts.acceptRelative ? PROTOCOL_RELATIVE_REGEX.test(inputString) : false);\r\n}\r\nfunction isScriptProtocol(protocol) {\r\n  return !!protocol && PROTOCOL_SCRIPT_RE.test(protocol);\r\n}\r\nfunction hasTrailingSlash(input = \"\", respectQueryAndFragment) {\r\n  if (!respectQueryAndFragment) {\r\n    return input.endsWith(\"/\");\r\n  }\r\n  return TRAILING_SLASH_RE.test(input);\r\n}\r\nfunction withoutTrailingSlash(input = \"\", respectQueryAndFragment) {\r\n  if (!respectQueryAndFragment) {\r\n    return (hasTrailingSlash(input) ? input.slice(0, -1) : input) || \"/\";\r\n  }\r\n  if (!hasTrailingSlash(input, true)) {\r\n    return input || \"/\";\r\n  }\r\n  let path = input;\r\n  let fragment = \"\";\r\n  const fragmentIndex = input.indexOf(\"#\");\r\n  if (fragmentIndex >= 0) {\r\n    path = input.slice(0, fragmentIndex);\r\n    fragment = input.slice(fragmentIndex);\r\n  }\r\n  const [s0, ...s] = path.split(\"?\");\r\n  const cleanPath = s0.endsWith(\"/\") ? s0.slice(0, -1) : s0;\r\n  return (cleanPath || \"/\") + (s.length > 0 ? `?${s.join(\"?\")}` : \"\") + fragment;\r\n}\r\nfunction withTrailingSlash(input = \"\", respectQueryAndFragment) {\r\n  if (!respectQueryAndFragment) {\r\n    return input.endsWith(\"/\") ? input : input + \"/\";\r\n  }\r\n  if (hasTrailingSlash(input, true)) {\r\n    return input || \"/\";\r\n  }\r\n  let path = input;\r\n  let fragment = \"\";\r\n  const fragmentIndex = input.indexOf(\"#\");\r\n  if (fragmentIndex >= 0) {\r\n    path = input.slice(0, fragmentIndex);\r\n    fragment = input.slice(fragmentIndex);\r\n    if (!path) {\r\n      return fragment;\r\n    }\r\n  }\r\n  const [s0, ...s] = path.split(\"?\");\r\n  return s0 + \"/\" + (s.length > 0 ? `?${s.join(\"?\")}` : \"\") + fragment;\r\n}\r\nfunction hasLeadingSlash(input = \"\") {\r\n  return input.startsWith(\"/\");\r\n}\r\nfunction withoutLeadingSlash(input = \"\") {\r\n  return (hasLeadingSlash(input) ? input.slice(1) : input) || \"/\";\r\n}\r\nfunction withLeadingSlash(input = \"\") {\r\n  return hasLeadingSlash(input) ? input : \"/\" + input;\r\n}\r\nfunction cleanDoubleSlashes(input = \"\") {\r\n  return input.split(\"://\").map((string_) => string_.replace(/\\/{2,}/g, \"/\")).join(\"://\");\r\n}\r\nfunction withBase(input, base) {\r\n  if (isEmptyURL(base) || hasProtocol(input)) {\r\n    return input;\r\n  }\r\n  const _base = withoutTrailingSlash(base);\r\n  if (input.startsWith(_base)) {\r\n    return input;\r\n  }\r\n  return joinURL(_base, input);\r\n}\r\nfunction withoutBase(input, base) {\r\n  if (isEmptyURL(base)) {\r\n    return input;\r\n  }\r\n  const _base = withoutTrailingSlash(base);\r\n  if (!input.startsWith(_base)) {\r\n    return input;\r\n  }\r\n  const trimmed = input.slice(_base.length);\r\n  return trimmed[0] === \"/\" ? trimmed : \"/\" + trimmed;\r\n}\r\nfunction withQuery(input, query) {\r\n  const parsed = parseURL(input);\r\n  const mergedQuery = { ...parseQuery(parsed.search), ...query };\r\n  parsed.search = stringifyQuery(mergedQuery);\r\n  return stringifyParsedURL(parsed);\r\n}\r\nfunction getQuery(input) {\r\n  return parseQuery(parseURL(input).search);\r\n}\r\nfunction isEmptyURL(url) {\r\n  return !url || url === \"/\";\r\n}\r\nfunction isNonEmptyURL(url) {\r\n  return url && url !== \"/\";\r\n}\r\nfunction joinURL(base, ...input) {\r\n  let url = base || \"\";\r\n  for (const segment of input.filter((url2) => isNonEmptyURL(url2))) {\r\n    if (url) {\r\n      const _segment = segment.replace(JOIN_LEADING_SLASH_RE, \"\");\r\n      url = withTrailingSlash(url) + _segment;\r\n    } else {\r\n      url = segment;\r\n    }\r\n  }\r\n  return url;\r\n}\r\nfunction joinRelativeURL(..._input) {\r\n  const JOIN_SEGMENT_SPLIT_RE = /\\/(?!\\/)/;\r\n  const input = _input.filter(Boolean);\r\n  const segments = [];\r\n  let segmentsDepth = 0;\r\n  for (const i of input) {\r\n    if (!i || i === \"/\") {\r\n      continue;\r\n    }\r\n    for (const [sindex, s] of i.split(JOIN_SEGMENT_SPLIT_RE).entries()) {\r\n      if (!s || s === \".\") {\r\n        continue;\r\n      }\r\n      if (s === \"..\") {\r\n        if (segments.length === 1 && hasProtocol(segments[0])) {\r\n          continue;\r\n        }\r\n        segments.pop();\r\n        segmentsDepth--;\r\n        continue;\r\n      }\r\n      if (sindex === 1 && segments[segments.length - 1]?.endsWith(\":/\")) {\r\n        segments[segments.length - 1] += \"/\" + s;\r\n        continue;\r\n      }\r\n      segments.push(s);\r\n      segmentsDepth++;\r\n    }\r\n  }\r\n  let url = segments.join(\"/\");\r\n  if (segmentsDepth >= 0) {\r\n    if (input[0]?.startsWith(\"/\") && !url.startsWith(\"/\")) {\r\n      url = \"/\" + url;\r\n    } else if (input[0]?.startsWith(\"./\") && !url.startsWith(\"./\")) {\r\n      url = \"./\" + url;\r\n    }\r\n  } else {\r\n    url = \"../\".repeat(-1 * segmentsDepth) + url;\r\n  }\r\n  if (input[input.length - 1]?.endsWith(\"/\") && !url.endsWith(\"/\")) {\r\n    url += \"/\";\r\n  }\r\n  return url;\r\n}\r\nfunction withHttp(input) {\r\n  return withProtocol(input, \"http://\");\r\n}\r\nfunction withHttps(input) {\r\n  return withProtocol(input, \"https://\");\r\n}\r\nfunction withoutProtocol(input) {\r\n  return withProtocol(input, \"\");\r\n}\r\nfunction withProtocol(input, protocol) {\r\n  const match = input.match(PROTOCOL_REGEX);\r\n  if (!match) {\r\n    return protocol + input;\r\n  }\r\n  return protocol + input.slice(match[0].length);\r\n}\r\nfunction normalizeURL(input) {\r\n  const parsed = parseURL(input);\r\n  parsed.pathname = encodePath(decodePath(parsed.pathname));\r\n  parsed.hash = encodeHash(decode(parsed.hash));\r\n  parsed.host = encodeHost(decode(parsed.host));\r\n  parsed.search = stringifyQuery(parseQuery(parsed.search));\r\n  return stringifyParsedURL(parsed);\r\n}\r\nfunction resolveURL(base = \"\", ...inputs) {\r\n  if (typeof base !== \"string\") {\r\n    throw new TypeError(\r\n      `URL input should be string received ${typeof base} (${base})`\r\n    );\r\n  }\r\n  const filteredInputs = inputs.filter((input) => isNonEmptyURL(input));\r\n  if (filteredInputs.length === 0) {\r\n    return base;\r\n  }\r\n  const url = parseURL(base);\r\n  for (const inputSegment of filteredInputs) {\r\n    const urlSegment = parseURL(inputSegment);\r\n    if (urlSegment.pathname) {\r\n      url.pathname = withTrailingSlash(url.pathname) + withoutLeadingSlash(urlSegment.pathname);\r\n    }\r\n    if (urlSegment.hash && urlSegment.hash !== \"#\") {\r\n      url.hash = urlSegment.hash;\r\n    }\r\n    if (urlSegment.search && urlSegment.search !== \"?\") {\r\n      if (url.search && url.search !== \"?\") {\r\n        const queryString = stringifyQuery({\r\n          ...parseQuery(url.search),\r\n          ...parseQuery(urlSegment.search)\r\n        });\r\n        url.search = queryString.length > 0 ? \"?\" + queryString : \"\";\r\n      } else {\r\n        url.search = urlSegment.search;\r\n      }\r\n    }\r\n  }\r\n  return stringifyParsedURL(url);\r\n}\r\nfunction isSamePath(p1, p2) {\r\n  return decode(withoutTrailingSlash(p1)) === decode(withoutTrailingSlash(p2));\r\n}\r\nfunction isEqual(a, b, options = {}) {\r\n  if (!options.trailingSlash) {\r\n    a = withTrailingSlash(a);\r\n    b = withTrailingSlash(b);\r\n  }\r\n  if (!options.leadingSlash) {\r\n    a = withLeadingSlash(a);\r\n    b = withLeadingSlash(b);\r\n  }\r\n  if (!options.encoding) {\r\n    a = decode(a);\r\n    b = decode(b);\r\n  }\r\n  return a === b;\r\n}\r\nfunction withFragment(input, hash) {\r\n  if (!hash || hash === \"#\") {\r\n    return input;\r\n  }\r\n  const parsed = parseURL(input);\r\n  parsed.hash = hash === \"\" ? \"\" : \"#\" + encodeHash(hash);\r\n  return stringifyParsedURL(parsed);\r\n}\r\nfunction withoutFragment(input) {\r\n  return stringifyParsedURL({ ...parseURL(input), hash: \"\" });\r\n}\r\nfunction withoutHost(input) {\r\n  const parsed = parseURL(input);\r\n  return (parsed.pathname || \"/\") + parsed.search + parsed.hash;\r\n}\r\n\r\nconst protocolRelative = Symbol.for(\"ufo:protocolRelative\");\r\nfunction parseURL(input = \"\", defaultProto) {\r\n  const _specialProtoMatch = input.match(\r\n    /^[\\s\\0]*(blob:|data:|javascript:|vbscript:)(.*)/i\r\n  );\r\n  if (_specialProtoMatch) {\r\n    const [, _proto, _pathname = \"\"] = _specialProtoMatch;\r\n    return {\r\n      protocol: _proto.toLowerCase(),\r\n      pathname: _pathname,\r\n      href: _proto + _pathname,\r\n      auth: \"\",\r\n      host: \"\",\r\n      search: \"\",\r\n      hash: \"\"\r\n    };\r\n  }\r\n  if (!hasProtocol(input, { acceptRelative: true })) {\r\n    return defaultProto ? parseURL(defaultProto + input) : parsePath(input);\r\n  }\r\n  const [, protocol = \"\", auth, hostAndPath = \"\"] = input.replace(/\\\\/g, \"/\").match(/^[\\s\\0]*([\\w+.-]{2,}:)?\\/\\/([^/@]+@)?(.*)/) || [];\r\n  const [, host = \"\", path = \"\"] = hostAndPath.match(/([^#/?]*)(.*)?/) || [];\r\n  const { pathname, search, hash } = parsePath(\r\n    path.replace(/\\/(?=[A-Za-z]:)/, \"\")\r\n  );\r\n  return {\r\n    protocol: protocol.toLowerCase(),\r\n    auth: auth ? auth.slice(0, Math.max(0, auth.length - 1)) : \"\",\r\n    host,\r\n    pathname,\r\n    search,\r\n    hash,\r\n    [protocolRelative]: !protocol\r\n  };\r\n}\r\nfunction parsePath(input = \"\") {\r\n  const [pathname = \"\", search = \"\", hash = \"\"] = (input.match(/([^#?]*)(\\?[^#]*)?(#.*)?/) || []).splice(1);\r\n  return {\r\n    pathname,\r\n    search,\r\n    hash\r\n  };\r\n}\r\nfunction parseAuth(input = \"\") {\r\n  const [username, password] = input.split(\":\");\r\n  return {\r\n    username: decode(username),\r\n    password: decode(password)\r\n  };\r\n}\r\nfunction parseHost(input = \"\") {\r\n  const [hostname, port] = (input.match(/([^/:]*):?(\\d+)?/) || []).splice(1);\r\n  return {\r\n    hostname: decode(hostname),\r\n    port\r\n  };\r\n}\r\nfunction stringifyParsedURL(parsed) {\r\n  const pathname = parsed.pathname || \"\";\r\n  const search = parsed.search ? (parsed.search.startsWith(\"?\") ? \"\" : \"?\") + parsed.search : \"\";\r\n  const hash = parsed.hash || \"\";\r\n  const auth = parsed.auth ? parsed.auth + \"@\" : \"\";\r\n  const host = parsed.host || \"\";\r\n  const proto = parsed.protocol || parsed[protocolRelative] ? (parsed.protocol || \"\") + \"//\" : \"\";\r\n  return proto + auth + host + pathname + search + hash;\r\n}\r\nconst FILENAME_STRICT_REGEX = /\\/([^/]+\\.[^/]+)$/;\r\nconst FILENAME_REGEX = /\\/([^/]+)$/;\r\nfunction parseFilename(input = \"\", { strict }) {\r\n  const { pathname } = parseURL(input);\r\n  const matches = strict ? pathname.match(FILENAME_STRICT_REGEX) : pathname.match(FILENAME_REGEX);\r\n  return matches ? matches[1] : void 0;\r\n}\r\n\r\nvar __defProp = Object.defineProperty;\r\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\r\nvar __publicField = (obj, key, value) => {\r\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\r\n  return value;\r\n};\r\nclass $URL {\r\n  constructor(input = \"\") {\r\n    __publicField(this, \"protocol\");\r\n    __publicField(this, \"host\");\r\n    __publicField(this, \"auth\");\r\n    __publicField(this, \"pathname\");\r\n    __publicField(this, \"query\", {});\r\n    __publicField(this, \"hash\");\r\n    if (typeof input !== \"string\") {\r\n      throw new TypeError(\r\n        `URL input should be string received ${typeof input} (${input})`\r\n      );\r\n    }\r\n    const parsed = parseURL(input);\r\n    this.protocol = decode(parsed.protocol);\r\n    this.host = decode(parsed.host);\r\n    this.auth = decode(parsed.auth);\r\n    this.pathname = decodePath(parsed.pathname);\r\n    this.query = parseQuery(parsed.search);\r\n    this.hash = decode(parsed.hash);\r\n  }\r\n  get hostname() {\r\n    return parseHost(this.host).hostname;\r\n  }\r\n  get port() {\r\n    return parseHost(this.host).port || \"\";\r\n  }\r\n  get username() {\r\n    return parseAuth(this.auth).username;\r\n  }\r\n  get password() {\r\n    return parseAuth(this.auth).password || \"\";\r\n  }\r\n  get hasProtocol() {\r\n    return this.protocol.length;\r\n  }\r\n  get isAbsolute() {\r\n    return this.hasProtocol || this.pathname[0] === \"/\";\r\n  }\r\n  get search() {\r\n    const q = stringifyQuery(this.query);\r\n    return q.length > 0 ? \"?\" + q : \"\";\r\n  }\r\n  get searchParams() {\r\n    const p = new URLSearchParams();\r\n    for (const name in this.query) {\r\n      const value = this.query[name];\r\n      if (Array.isArray(value)) {\r\n        for (const v of value) {\r\n          p.append(name, v);\r\n        }\r\n      } else {\r\n        p.append(\r\n          name,\r\n          typeof value === \"string\" ? value : JSON.stringify(value)\r\n        );\r\n      }\r\n    }\r\n    return p;\r\n  }\r\n  get origin() {\r\n    return (this.protocol ? this.protocol + \"//\" : \"\") + encodeHost(this.host);\r\n  }\r\n  get fullpath() {\r\n    return encodePath(this.pathname) + this.search + encodeHash(this.hash);\r\n  }\r\n  get encodedAuth() {\r\n    if (!this.auth) {\r\n      return \"\";\r\n    }\r\n    const { username, password } = parseAuth(this.auth);\r\n    return encodeURIComponent(username) + (password ? \":\" + encodeURIComponent(password) : \"\");\r\n  }\r\n  get href() {\r\n    const auth = this.encodedAuth;\r\n    const originWithAuth = (this.protocol ? this.protocol + \"//\" : \"\") + (auth ? auth + \"@\" : \"\") + encodeHost(this.host);\r\n    return this.hasProtocol && this.isAbsolute ? originWithAuth + this.fullpath : this.fullpath;\r\n  }\r\n  append(url) {\r\n    if (url.hasProtocol) {\r\n      throw new Error(\"Cannot append a URL with protocol\");\r\n    }\r\n    Object.assign(this.query, url.query);\r\n    if (url.pathname) {\r\n      this.pathname = withTrailingSlash(this.pathname) + withoutLeadingSlash(url.pathname);\r\n    }\r\n    if (url.hash) {\r\n      this.hash = url.hash;\r\n    }\r\n  }\r\n  toJSON() {\r\n    return this.href;\r\n  }\r\n  toString() {\r\n    return this.href;\r\n  }\r\n}\r\nfunction createURL(input) {\r\n  return new $URL(input);\r\n}\r\n\r\nexport { $URL, cleanDoubleSlashes, createURL, decode, decodePath, decodeQueryKey, decodeQueryValue, encode, encodeHash, encodeHost, encodeParam, encodePath, encodeQueryItem, encodeQueryKey, encodeQueryValue, getQuery, hasLeadingSlash, hasProtocol, hasTrailingSlash, isEmptyURL, isEqual, isNonEmptyURL, isRelative, isSamePath, isScriptProtocol, joinRelativeURL, joinURL, normalizeURL, parseAuth, parseFilename, parseHost, parsePath, parseQuery, parseURL, resolveURL, stringifyParsedURL, stringifyQuery, withBase, withFragment, withHttp, withHttps, withLeadingSlash, withProtocol, withQuery, withTrailingSlash, withoutBase, withoutFragment, withoutHost, withoutLeadingSlash, withoutProtocol, withoutTrailingSlash };\r\n"],
  "mappings": "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",
  "names": ["s"]
}
