var __defProp = Object.defineProperty;
var __export = (target4, all) => {
  for (var name in all)
    __defProp(target4, name, { get: all[name], enumerable: true });
};

// src/vue-plugin.ts
import { inject, ref } from "vue";

// src/bridge-events/devtools-listeners.ts
var devtools_listeners_exports = {};
__export(devtools_listeners_exports, {
  onAddTimelineEvent: () => onAddTimelineEvent,
  onCustomCommandsUpdated: () => onCustomCommandsUpdated,
  onCustomTabsUpdated: () => onCustomTabsUpdated,
  onDevToolsStateUpdated: () => onDevToolsStateUpdated,
  onInspectorStateUpdated: () => onInspectorStateUpdated,
  onInspectorTreeUpdated: () => onInspectorTreeUpdated,
  onRouterInfoUpdated: () => onRouterInfoUpdated
});

// src/bridge/app.ts
import { devtools, stringify as stringify2 } from "@vue/devtools-kit";

// src/bridge-events/devtools-actions.ts
var devtools_actions_exports = {};
__export(devtools_actions_exports, {
  checkVueInspectorDetected: () => checkVueInspectorDetected,
  editInspectorState: () => editInspectorState,
  enableVueInspector: () => enableVueInspector,
  getComponentBoundingRect: () => getComponentBoundingRect,
  getDevToolsState: () => getDevToolsState,
  getInspectorState: () => getInspectorState,
  getInspectorTree: () => getInspectorTree,
  getMatchedRoutes: () => getMatchedRoutes,
  getRouterInfo: () => getRouterInfo,
  getTimelineLayer: () => getTimelineLayer,
  inspectComponentInspector: () => inspectComponentInspector,
  navigateAction: () => navigateAction,
  openInEditor: () => openInEditor,
  scrollToComponent: () => scrollToComponent,
  toggleApp: () => toggleApp,
  toggleComponentInspector: () => toggleComponentInspector,
  toggleHighPerfMode: () => toggleHighPerfMode,
  unhighlightElement: () => unhighlightElement,
  updateInspectorTreeId: () => updateInspectorTreeId
});
import { toggleHighPerfMode as _toggleHighPerfMode, stringify } from "@vue/devtools-kit";
var checkVueInspectorDetected = defineDevToolsAction("devtools:check-vue-inspector-detected", async (devtools4) => {
  var _a, _b;
  return !!await ((_b = (_a = devtools4 == null ? void 0 : devtools4.api) == null ? void 0 : _a.getVueInspector) == null ? void 0 : _b.call(_a));
});
var enableVueInspector = defineDevToolsAction("devtools:enable-vue-inspector", async (devtools4) => {
  var _a, _b;
  const inspector = await ((_b = (_a = devtools4 == null ? void 0 : devtools4.api) == null ? void 0 : _a.getVueInspector) == null ? void 0 : _b.call(_a));
  if (inspector)
    await inspector.enable();
});
var toggleApp = defineDevToolsAction("devtools:toggle-app", async (devtools4, id) => {
  await devtools4.api.toggleApp(id);
});
var editInspectorState = defineDevToolsAction("devtools:edit-inspector-state", (devtools4, payload) => {
  devtools4.api.editInspectorState(payload);
});
var openInEditor = defineDevToolsAction("devtools:open-in-editor", (devtools4, file, baseUrl) => {
  devtools4.api.openInEditor({ file, baseUrl });
});
var getInspectorTree = defineDevToolsAction("devtools:inspector-tree", async (devtools4, payload) => {
  const res = await devtools4.api.getInspectorTree(payload);
  return stringify(res);
});
var getComponentBoundingRect = defineDevToolsAction("devtools:get-component-bounding-rect", (devtools4, payload) => {
  return devtools4.api.getComponentBoundingRect(payload);
});
var inspectComponentInspector = defineDevToolsAction("devtools:inspect-component-inspector", (devtools4) => {
  return devtools4.api.inspectComponentInspector();
});
var toggleComponentInspector = defineDevToolsAction("devtools:toggle-component-inspector", (devtools4, payload) => {
  return devtools4.api.toggleComponentInspector(payload);
});
var scrollToComponent = defineDevToolsAction("devtools:scroll-to-component", (devtools4, payload) => {
  return devtools4.api.scrollToComponent(payload);
});
var getInspectorState = defineDevToolsAction("devtools:inspector-state", async (devtools4, payload) => {
  const res = await devtools4.api.getInspectorState(payload);
  return stringify(res);
});
var updateInspectorTreeId = defineDevToolsAction("devtools:update-inspector-tree-id", (devtools4, payload) => {
  devtools4.context.activeInspectorTreeId = payload;
});
var unhighlightElement = defineDevToolsAction("devtools:unhighlight-element", (devtools4) => {
  return devtools4.api.unhighlightElement();
});
var getRouterInfo = defineDevToolsAction("devtools:router-info", (devtools4) => {
  return JSON.stringify(devtools4.context.routerInfo);
});
var navigateAction = defineDevToolsAction("devtools:router-navigate", (devtools4, payload) => {
  var _a;
  (_a = devtools4.context.router) == null ? void 0 : _a.push(payload).catch((e) => e);
});
var getMatchedRoutes = defineDevToolsAction("devtools:matched-routes", (devtools4, path) => {
  var _a, _b;
  const c = console.warn;
  console.warn = () => {
  };
  const matched = (_b = (_a = devtools4.context.router) == null ? void 0 : _a.resolve({
    path: path || "/"
  }).matched) != null ? _b : [];
  console.warn = c;
  return JSON.stringify(matched);
});
var getTimelineLayer = defineDevToolsAction("devtools:get-timeline-layer", (devtools4) => {
  return devtools4.context.timelineLayer;
});
var getDevToolsState = defineDevToolsAction("devtools:get-state", (devtools4) => {
  var _a, _b;
  return {
    connected: devtools4.state.connected,
    clientConnected: devtools4.state.clientConnected,
    vueVersion: ((_b = (_a = devtools4.state) == null ? void 0 : _a.activeAppRecord) == null ? void 0 : _b.version) || "",
    tabs: devtools4.state.tabs,
    commands: devtools4.state.commands,
    vitePluginDetected: devtools4.state.vitePluginDetected,
    appRecords: devtools4.state.appRecords.map((item) => ({
      id: item.id,
      name: item.name,
      version: item.version,
      routerId: item.routerId,
      moduleDetectives: item.moduleDetectives
    })),
    activeAppRecordId: devtools4.state.activeAppRecordId
  };
});
var toggleHighPerfMode = defineDevToolsAction("devtools:toggle-high-perf-mode", (_, payload) => {
  _toggleHighPerfMode(payload);
});

// src/bridge-events/index.ts
function initDevToolsAEvent() {
  Object.values(devtools_actions_exports).forEach((action) => {
    action();
  });
  Object.values(devtools_listeners_exports).forEach((action) => {
    action(() => {
    });
  });
}

// src/bridge/shared.ts
import { target } from "@vue/devtools-shared";
var BRIDGE_DEVTOOLS_ACTION_KEY = "devtools:bridge-action";
var BRIDGE_DEVTOOLS_LISTENER_KEY = "devtools:bridge-listener";
var BRIDGE_GLOBAL_VAR_KEY = "__vue_devtools_bridge__";
var BRIDGE_TARET_KEY = "__vue_devtools_bridge_target__";
var BRIDGE_DEVTOOLS_ACTION_EVENTS_KEY = "devtools:bridge-action-events";
var BRIDGE_DEVTOOLS_LISTENER_EVENTS_KEY = "devtools:bridge-listener-events";
var devtoolsActionEvents = target[BRIDGE_DEVTOOLS_ACTION_EVENTS_KEY] = /* @__PURE__ */ new Map();
var devtoolsListenerEvents = target[BRIDGE_DEVTOOLS_LISTENER_EVENTS_KEY] = /* @__PURE__ */ new Map();
function getBridgeInstance() {
  return target[BRIDGE_GLOBAL_VAR_KEY];
}
function setBridgeInstance(instance) {
  target[BRIDGE_GLOBAL_VAR_KEY] = instance;
}
function setBridgeTarget(t) {
  target[BRIDGE_TARET_KEY] = t;
}
function getBridgeTarget() {
  return target[BRIDGE_TARET_KEY];
}

// src/bridge/app.ts
function setupAppBridge(bridge) {
  setBridgeTarget("app");
  initDevToolsAEvent();
  bridge.on(BRIDGE_DEVTOOLS_ACTION_KEY, async (payload) => {
    const action = devtoolsActionEvents.get(payload.name);
    if (action) {
      const result = await action(devtools, ...payload.args);
      bridge.emit(payload.key, result);
    }
  });
  bridge.on(BRIDGE_DEVTOOLS_LISTENER_KEY, async (payload) => {
    const listener = devtoolsListenerEvents.get(payload.name);
    if (listener) {
      listener(devtools, (res) => {
        const stringifyFn = payload.parser === "devtools" ? stringify2 : JSON.stringify;
        bridge.emit(payload.key, stringifyFn(res));
      });
    }
  });
}

// src/bridge/devtools.ts
function setupDevToolsBridge(bridge) {
  setBridgeInstance(bridge);
  setBridgeTarget("devtools");
}

// src/bridge/api.ts
import { parse } from "@vue/devtools-kit";
import { nanoid } from "nanoid/non-secure";
function defineDevToolsAction(name, action) {
  return async (...args) => {
    const target4 = getBridgeTarget();
    if (target4 === "devtools") {
      const bridge = getBridgeInstance();
      const uniqueEventKey = nanoid();
      return await new Promise((resolve) => {
        bridge.once(uniqueEventKey, (e) => {
          resolve(e);
        });
        bridge.emit(BRIDGE_DEVTOOLS_ACTION_KEY, {
          name,
          key: uniqueEventKey,
          args
        });
      });
    } else {
      devtoolsActionEvents.set(name, action);
    }
  };
}
function defineDevToolsListener(name, fn, options = {}) {
  return (listener) => {
    const target4 = getBridgeTarget();
    if (target4 === "devtools") {
      const {
        parser = "devtools"
      } = options;
      const parserFn = parser === "devtools" ? parse : JSON.parse;
      const bridge = getBridgeInstance();
      const uniqueEventKey = nanoid();
      const off = bridge.on(uniqueEventKey, (e) => {
        listener(parserFn(e));
      });
      bridge.emit(BRIDGE_DEVTOOLS_LISTENER_KEY, {
        key: uniqueEventKey,
        name,
        parser
      });
      return off;
    } else {
      devtoolsListenerEvents.set(name, fn);
      return () => {
      };
    }
  };
}

// src/bridge/core.ts
import { NOOP } from "@vue/devtools-shared";
import mitt from "mitt";
var Bridge = class {
  constructor(adapter = {
    tracker: NOOP,
    trigger: NOOP
  }) {
    this.emitter = mitt();
    this.adapter = adapter;
    this.adapter.tracker((message) => {
      this._emit(message.event, message.data);
    });
  }
  _on(eventName, handler) {
    this.emitter.on(eventName, handler);
  }
  off(eventName, handler) {
    this.emitter.off(eventName, handler);
  }
  _emit(eventName, data) {
    this.emitter.emit(eventName, data);
  }
  on(eventName, handler) {
    this._on(eventName, handler);
    return () => this.off(eventName, handler);
  }
  once(eventName, handler) {
    const onceHandler = (...args) => {
      handler(...args);
      this.off(eventName, onceHandler);
    };
    this._on(eventName, onceHandler);
  }
  emit(eventName, data) {
    this.adapter.trigger({
      event: eventName,
      data
    });
    this._emit(eventName, data);
  }
  removeAllListeners() {
    this.emitter.all.clear();
  }
};

// src/bridge-events/devtools-listeners.ts
var onDevToolsStateUpdated = defineDevToolsListener("devtools:on-state-updated", (devtools4, callback) => {
  function setPayload(payload) {
    var _a;
    return {
      vueVersion: ((_a = payload == null ? void 0 : payload.activeAppRecord) == null ? void 0 : _a.version) || "",
      connected: payload.connected,
      clientConnected: payload.clientConnected,
      tabs: payload.tabs,
      commands: payload.commands,
      vitePluginDetected: payload.vitePluginDetected,
      appRecords: payload.appRecords.map((item) => ({
        id: item.id,
        name: item.name,
        version: item.version,
        routerId: item.routerId,
        moduleDetectives: item.moduleDetectives
      })),
      activeAppRecordId: payload.activeAppRecordId
    };
  }
  function subscribe() {
    devtools4.api.on.devtoolsStateUpdated((payload) => {
      callback(setPayload(payload));
    });
  }
  if (devtools4 == null ? void 0 : devtools4.api) {
    subscribe();
  } else {
    const timer = setInterval(() => {
      if (devtools4.state.connected) {
        const payload = devtools4.state;
        callback(setPayload(payload));
        subscribe();
        clearInterval(timer);
      }
    }, 10);
  }
});
var onCustomTabsUpdated = defineDevToolsListener("devtools:on-custom-tabs-updated", (devtools4, callback) => {
  devtools4.api.on.customTabsUpdated((payload) => {
    callback(payload);
  });
});
var onCustomCommandsUpdated = defineDevToolsListener("devtools:on-custom-commands-updated", (devtools4, callback) => {
  devtools4.api.on.customCommandsUpdated((payload) => {
    callback(payload);
  });
});
var onInspectorTreeUpdated = defineDevToolsListener("devtools:on-inspector-tree-updated", (devtools4, callback) => {
  devtools4.api.on.sendInspectorTree((payload) => {
    callback(payload);
  });
});
var onInspectorStateUpdated = defineDevToolsListener("devtools:on-inspector-state-updated", (devtools4, callback) => {
  devtools4.api.on.sendInspectorState((payload) => {
    callback(payload);
  });
});
var onRouterInfoUpdated = defineDevToolsListener("devtools:on-router-info-updated", (devtools4, callback) => {
  devtools4.api.on.routerInfoUpdated((payload) => {
    callback(payload);
  });
}, { parser: "json" });
var onAddTimelineEvent = defineDevToolsListener("devtools:on-add-timeline-event", (devtools4, callback) => {
  devtools4.api.on.addTimelineEvent((payload) => {
    callback(payload);
  });
});

// src/vue-plugin.ts
function initDevToolsState() {
  const connected = ref(false);
  const clientConnected = ref(false);
  const componentCount = ref(0);
  const vueVersion = ref("");
  const tabs = ref([]);
  const commands = ref([]);
  const vitePluginDetected = ref(false);
  const appRecords = ref([]);
  const activeAppRecordId = ref("");
  function init() {
    getDevToolsState().then((_data) => {
      const data = _data;
      connected.value = data.connected;
      clientConnected.value = data.clientConnected;
      vueVersion.value = data.vueVersion || "";
      tabs.value = data.tabs;
      commands.value = data.commands;
      vitePluginDetected.value = data.vitePluginDetected;
      appRecords.value = data.appRecords;
      activeAppRecordId.value = data.activeAppRecordId;
    });
    onDevToolsStateUpdated((data) => {
      connected.value = data.connected;
      clientConnected.value = data.clientConnected;
      vueVersion.value = data.vueVersion || "";
      tabs.value = data.tabs;
      commands.value = data.commands;
      vitePluginDetected.value = data.vitePluginDetected;
      appRecords.value = data.appRecords;
      activeAppRecordId.value = data.activeAppRecordId;
    });
  }
  return {
    init,
    restore: init,
    vueVersion,
    connected,
    clientConnected,
    componentCount,
    tabs,
    commands,
    vitePluginDetected,
    appRecords,
    activeAppRecordId
  };
}
function initDevToolsBridge(_bridge) {
  const bridge = ref(_bridge);
  function restore(_bridge2) {
    bridge.value = _bridge2;
  }
  return {
    bridge,
    restore
  };
}
var VueDevToolsBridgeSymbol = Symbol("VueDevToolsBridgeSymbol");
var VueDevToolsStateSymbol = Symbol("VueDevToolsStateSymbol");
function createDevToolsVuePlugin(pluginOptions) {
  return {
    install(app, options) {
      const { bridge: _bridge, viewMode: _viewMode } = pluginOptions;
      const viewMode = ref(_viewMode);
      const state = initDevToolsState();
      const bridgeContext = initDevToolsBridge(_bridge);
      state.init();
      app.provide(VueDevToolsBridgeSymbol, bridgeContext.bridge);
      app.provide(VueDevToolsStateSymbol, state);
      app.provide("viewMode", viewMode);
      bridgeContext.bridge.value.on("toggle-view-mode", (v) => {
        viewMode.value = v;
      });
      app.config.globalProperties.__VUE_DEVTOOLS_UPDATE__ = (_bridge2) => {
        bridgeContext.restore(_bridge2);
        state.restore();
      };
    }
  };
}
function useDevToolsBridge() {
  return inject(VueDevToolsBridgeSymbol);
}
function useDevToolsState() {
  return inject(VueDevToolsStateSymbol);
}

// src/injection.ts
import { devtools as devtools3, onDevToolsConnected } from "@vue/devtools-kit";

// src/handshake.ts
import { devtools as devtools2 } from "@vue/devtools-kit";
var HandShakeEvents = /* @__PURE__ */ ((HandShakeEvents2) => {
  HandShakeEvents2["SYN"] = "syn";
  HandShakeEvents2["SYN_ACK"] = "syn-ack";
  HandShakeEvents2["ACK"] = "ack";
  return HandShakeEvents2;
})(HandShakeEvents || {});
var HandShake = class {
  constructor(bridge) {
    this.socket = bridge;
  }
};
var HandShakeClient = class extends HandShake {
  constructor(bridge) {
    super(bridge);
  }
  onnConnect() {
    return new Promise((resolve) => {
      this.socket.emit("syn" /* SYN */);
      const timer = setInterval(() => {
        this.socket.emit("syn" /* SYN */);
      }, 300);
      this.socket.on("syn-ack" /* SYN_ACK */, () => {
        clearInterval(timer);
        this.socket.emit("ack" /* ACK */);
        devtools2.state.clientConnected = true;
        resolve();
      });
    });
  }
};
var HandShakeServer = class extends HandShake {
  constructor(bridge) {
    super(bridge);
  }
  onnConnect() {
    return new Promise((resolve) => {
      this.socket.on("syn" /* SYN */, () => {
        this.socket.emit("syn-ack" /* SYN_ACK */);
        const timer = setInterval(() => {
          this.socket.emit("syn-ack" /* SYN_ACK */);
        }, 300);
        this.socket.on("ack" /* ACK */, () => {
          clearInterval(timer);
          resolve();
        });
      });
    });
  }
};

// src/injection.ts
function prepareInjection(bridge) {
  setupAppBridge(bridge);
  new HandShakeClient(bridge).onnConnect().then(() => {
    bridge.on("devtools:client-ready", () => {
      onDevToolsConnected(() => {
        devtools3.state.connected = true;
      });
    });
  });
}

// src/client.ts
import { isBrowser, target as target2 } from "@vue/devtools-shared";
function setDevToolsClientUrl(url) {
  target2.__VUE_DEVTOOLS_CLIENT_URL__ = url;
}
function getDevToolsClientUrl() {
  var _a;
  return (_a = target2.__VUE_DEVTOOLS_CLIENT_URL__) != null ? _a : (() => {
    if (isBrowser) {
      const devtoolsMeta = document.querySelector("meta[name=__VUE_DEVTOOLS_CLIENT_URL__]");
      if (devtoolsMeta)
        return devtoolsMeta.getAttribute("content");
    }
    return "";
  })();
}

// ../../node_modules/.pnpm/vite-hot-client@0.2.3_vite@5.2.6/node_modules/vite-hot-client/dist/index.mjs
async function getViteClient(base = "/", warning = true) {
  var _a;
  try {
    const url = `${base}@vite/client`;
    const res = await fetch(url);
    const text = await res.text();
    if (text.startsWith("<") || !((_a = res.headers.get("content-type")) == null ? void 0 : _a.includes("javascript")))
      throw new Error("Not javascript");
    return await import(
      /* @vite-ignore */
      url
    );
  } catch (e) {
    if (warning)
      console.error(`[vite-hot-client] Failed to import "${base}@vite/client"`);
  }
  return void 0;
}

// src/vite-bridge/client.ts
import { nanoid as nanoid2 } from "nanoid/non-secure";

// src/vite-bridge/shared.ts
import { target as target3 } from "@vue/devtools-shared";
var VITE_CLIENT_HOT_CONTEXT = "vite:client-hot-context";
var VITE_SERVER_CONTEXT = "vite:server";
function getViteClientHotContext() {
  return target3[VITE_CLIENT_HOT_CONTEXT];
}
function setViteClientHotContext(context) {
  target3[VITE_CLIENT_HOT_CONTEXT] = context;
}
function getViteServerContext() {
  return target3[VITE_SERVER_CONTEXT];
}
function setViteServerContext(context) {
  target3[VITE_SERVER_CONTEXT] = context;
}

// src/vite-bridge/client.ts
var import_meta = {};
async function getViteHotContext() {
  var _a;
  if ((_a = import_meta.url) == null ? void 0 : _a.includes("chrome-extension://"))
    return;
  const viteCLient = await getViteClient(`${location.pathname.split("/__devtools__")[0] || ""}/`.replace(/\/\//g, "/"), false);
  return viteCLient == null ? void 0 : viteCLient.createHotContext("/____");
}
async function initViteClientHotContext() {
  const context = await getViteHotContext();
  context && setViteClientHotContext(context);
}
function callViteServerAction(name) {
  return async (...args) => {
    const viteClient = getViteClientHotContext();
    const uniqueEventKey = nanoid2();
    return new Promise((resolve) => {
      const cb = (e) => {
        var _a;
        if (viteClient.off)
          viteClient.off(uniqueEventKey, cb);
        else
          (_a = viteClient.dispose) == null ? void 0 : _a.call(viteClient, cb);
        resolve(e);
      };
      viteClient.on(uniqueEventKey, cb);
      viteClient.send(name, {
        key: uniqueEventKey,
        payload: args
      });
    });
  };
}
function defineViteClientListener(name) {
  return (listener) => {
    const viteClient = getViteClientHotContext();
    viteClient.on(name, listener);
    return () => {
      var _a;
      if (viteClient.off)
        viteClient.off(name, listener);
      else
        (_a = viteClient.dispose) == null ? void 0 : _a.call(viteClient, listener);
    };
  };
}

// src/vite-bridge/server.ts
function initViteServerContext(context) {
  setViteServerContext(context);
}
function defineViteServerAction(name, action) {
  var _a;
  const viteServer = getViteServerContext();
  const ws = (_a = viteServer.hot) != null ? _a : viteServer.ws;
  ws.on(name, async ({ key, payload }) => {
    const res = await action(...payload);
    ws.send(key, res);
  });
}
function callViteClientListener(name) {
  return async (...args) => {
    var _a;
    const viteServer = getViteServerContext();
    const ws = (_a = viteServer.hot) != null ? _a : viteServer.ws;
    ws.send(name, ...args);
  };
}

// src/separate-window/index.ts
var BROADCAST_CHANNEL_NAME = "__vue-devtools-broadcast-channel__";
var MESSAGING_APP_TARGET = "__VUE_DEVTOOLS_USER_APP__";
var MESSAGING_DEVTOOLS_TARGET = "__VUE_DEVTOOLS_CLIENT__";
var CHECK_CONNECTION_EVENT = "__VUE_DEVTOOLS_CHECK_CONNECTION__";
var CONNECTED_EVENT = "__VUE_DEVTOOLS_CONNECTED__";
function initAppSeparateWindow() {
  const channel = new BroadcastChannel(BROADCAST_CHANNEL_NAME);
  const bridge = new Bridge({
    tracker(fn) {
      channel.onmessage = (event) => {
        if (event.data.target === MESSAGING_DEVTOOLS_TARGET)
          fn(event.data.data);
      };
    },
    trigger(data) {
      channel.postMessage({
        target: MESSAGING_APP_TARGET,
        data
      });
    }
  });
  prepareInjection(bridge);
  bridge.on(CHECK_CONNECTION_EVENT, () => {
    bridge.emit(CONNECTED_EVENT);
    setTimeout(() => {
      bridge.emit("syn");
    }, 200);
    window.addEventListener("beforeunload", () => {
      bridge.emit("disconnect");
    });
  });
}
function initDevToolsSeparateWindowBridge(channel) {
  const bridge = new Bridge({
    tracker(fn) {
      channel.onmessage = (event) => {
        if (event.data.target === MESSAGING_APP_TARGET)
          fn(event.data.data);
      };
    },
    trigger(data) {
      channel.postMessage({
        target: MESSAGING_DEVTOOLS_TARGET,
        data
      });
    }
  });
  return bridge;
}
function initDevToolsSeparateWindow(options = {}) {
  const { onConnected = () => {
  } } = options;
  let connectionTimer = null;
  const channel = new BroadcastChannel(BROADCAST_CHANNEL_NAME);
  function connect() {
    connectionTimer = setInterval(() => {
      channel.postMessage({
        target: MESSAGING_DEVTOOLS_TARGET,
        data: {
          event: CHECK_CONNECTION_EVENT
        }
      });
    }, 2e3);
  }
  channel.onmessage = (event) => {
    var _a, _b;
    if (((_b = (_a = event.data) == null ? void 0 : _a.data) == null ? void 0 : _b.event) === CONNECTED_EVENT) {
      clearInterval(connectionTimer);
      onConnected(channel);
    }
  };
  connect();
}
export {
  Bridge,
  HandShakeClient,
  HandShakeEvents,
  HandShakeServer,
  callViteClientListener,
  callViteServerAction,
  checkVueInspectorDetected,
  createDevToolsVuePlugin,
  defineDevToolsAction,
  defineDevToolsListener,
  defineViteClientListener,
  defineViteServerAction,
  editInspectorState,
  enableVueInspector,
  getComponentBoundingRect,
  getDevToolsClientUrl,
  getDevToolsState,
  getInspectorState,
  getInspectorTree,
  getMatchedRoutes,
  getRouterInfo,
  getTimelineLayer,
  initAppSeparateWindow,
  initDevToolsSeparateWindow,
  initDevToolsSeparateWindowBridge,
  initViteClientHotContext,
  initViteServerContext,
  inspectComponentInspector,
  navigateAction,
  onAddTimelineEvent,
  onCustomCommandsUpdated,
  onCustomTabsUpdated,
  onDevToolsStateUpdated,
  onInspectorStateUpdated,
  onInspectorTreeUpdated,
  onRouterInfoUpdated,
  openInEditor,
  prepareInjection,
  scrollToComponent,
  setDevToolsClientUrl,
  setupAppBridge,
  setupDevToolsBridge,
  toggleApp,
  toggleComponentInspector,
  toggleHighPerfMode,
  unhighlightElement,
  updateInspectorTreeId,
  useDevToolsBridge,
  useDevToolsState
};
