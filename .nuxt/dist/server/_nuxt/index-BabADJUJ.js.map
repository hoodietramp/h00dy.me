{"version":3,"file":"index-BabADJUJ.js","sources":["../../../../node_modules/@unhead/vue/dist/shared/vue.f36acd1f.mjs","../../../../node_modules/@unhead/vue/dist/index.mjs"],"sourcesContent":["import { ref, watchEffect, watch, getCurrentInstance, onBeforeUnmount, onDeactivated, onActivated } from 'vue';\r\nimport { i as injectHead, r as resolveUnrefHeadInput } from './vue.cf295fb1.mjs';\r\n\r\nfunction useHead(input, options = {}) {\r\n  const head = options.head || injectHead();\r\n  if (head) {\r\n    if (!head.ssr)\r\n      return clientUseHead(head, input, options);\r\n    return head.push(input, options);\r\n  }\r\n}\r\nfunction clientUseHead(head, input, options = {}) {\r\n  const deactivated = ref(false);\r\n  const resolvedInput = ref({});\r\n  watchEffect(() => {\r\n    resolvedInput.value = deactivated.value ? {} : resolveUnrefHeadInput(input);\r\n  });\r\n  const entry = head.push(resolvedInput.value, options);\r\n  watch(resolvedInput, (e) => {\r\n    entry.patch(e);\r\n  });\r\n  const vm = getCurrentInstance();\r\n  if (vm) {\r\n    onBeforeUnmount(() => {\r\n      entry.dispose();\r\n    });\r\n    onDeactivated(() => {\r\n      deactivated.value = true;\r\n    });\r\n    onActivated(() => {\r\n      deactivated.value = false;\r\n    });\r\n  }\r\n  return entry;\r\n}\r\n\r\nexport { useHead as u };\r\n","import { useScript as useScript$1 } from 'unhead';\r\nexport { CapoPlugin, HashHydrationPlugin, createHeadCore } from 'unhead';\r\nimport { V as Vue3, h as headSymbol, i as injectHead } from './shared/vue.cf295fb1.mjs';\r\nexport { c as createHead, a as createServerHead, r as resolveUnrefHeadInput, s as setHeadInjectionHandler } from './shared/vue.cf295fb1.mjs';\r\nimport { getCurrentInstance, ref } from 'vue';\r\nimport { u as useHead } from './shared/vue.f36acd1f.mjs';\r\nimport { composableNames, whitelistSafeInput, unpackMeta } from '@unhead/shared';\r\n\r\nconst VueHeadMixin = {\r\n  created() {\r\n    let source = false;\r\n    if (Vue3) {\r\n      const instance = getCurrentInstance();\r\n      if (!instance)\r\n        return;\r\n      const options = instance.type;\r\n      if (!options || !(\"head\" in options))\r\n        return;\r\n      source = typeof options.head === \"function\" ? () => options.head.call(instance.proxy) : options.head;\r\n    } else {\r\n      const head = this.$options.head;\r\n      if (head) {\r\n        source = typeof head === \"function\" ? () => head.call(this) : head;\r\n      }\r\n    }\r\n    source && useHead(source);\r\n  }\r\n};\r\n\r\nconst Vue2ProvideUnheadPlugin = function(_Vue, head) {\r\n  _Vue.mixin({\r\n    beforeCreate() {\r\n      const options = this.$options;\r\n      const origProvide = options.provide;\r\n      options.provide = function() {\r\n        let origProvideResult;\r\n        if (typeof origProvide === \"function\")\r\n          origProvideResult = origProvide.call(this);\r\n        else\r\n          origProvideResult = origProvide || {};\r\n        return {\r\n          ...origProvideResult,\r\n          [headSymbol]: head\r\n        };\r\n      };\r\n    }\r\n  });\r\n};\r\n\r\nconst coreComposableNames = [\r\n  \"injectHead\"\r\n];\r\nconst unheadVueComposablesImports = {\r\n  \"@unhead/vue\": [...coreComposableNames, ...composableNames]\r\n};\r\n\r\nfunction useHeadSafe(input, options = {}) {\r\n  return useHead(input, { ...options, transform: whitelistSafeInput });\r\n}\r\n\r\nfunction useSeoMeta(input, options) {\r\n  const { title, titleTemplate, ...meta } = input;\r\n  return useHead({\r\n    title,\r\n    titleTemplate,\r\n    // @ts-expect-error runtime type\r\n    _flatMeta: meta\r\n  }, {\r\n    ...options,\r\n    transform(t) {\r\n      const meta2 = unpackMeta({ ...t._flatMeta });\r\n      delete t._flatMeta;\r\n      return {\r\n        // @ts-expect-error runtime type\r\n        ...t,\r\n        meta: meta2\r\n      };\r\n    }\r\n  });\r\n}\r\n\r\nfunction useServerHead(input, options = {}) {\r\n  const head = options.head || injectHead();\r\n  delete options.head;\r\n  if (head)\r\n    return head.push(input, { ...options, mode: \"server\" });\r\n}\r\n\r\nfunction useServerHeadSafe(input, options = {}) {\r\n  return useHeadSafe(input, { ...options, mode: \"server\" });\r\n}\r\n\r\nfunction useServerSeoMeta(input, options) {\r\n  return useSeoMeta(input, { ...options || {}, mode: \"server\" });\r\n}\r\n\r\nfunction useScript(_input, _options) {\r\n  const input = typeof _input === \"string\" ? { src: _input } : _input;\r\n  const head = injectHead();\r\n  const options = _options || {};\r\n  options.head = head;\r\n  options.eventContext = getCurrentInstance();\r\n  const status = ref(\"awaitingLoad\");\r\n  const stubOptions = options.stub;\r\n  options.stub = ({ script, fn }) => {\r\n    script.status = status;\r\n    if (fn === \"$script\")\r\n      return script;\r\n    return stubOptions?.({ script, fn });\r\n  };\r\n  let instance;\r\n  const rmHook = head.hooks.hook(\"script:updated\", ({ script }) => {\r\n    if (instance && script.id === instance.$script.id) {\r\n      status.value = script.status;\r\n      if (script.status === \"removed\")\r\n        rmHook();\r\n    }\r\n  });\r\n  return instance = useScript$1(input, options);\r\n}\r\n\r\nexport { Vue2ProvideUnheadPlugin, VueHeadMixin, injectHead, unheadVueComposablesImports, useHead, useHeadSafe, useScript, useSeoMeta, useServerHead, useServerHeadSafe, useServerSeoMeta };\r\n"],"names":[],"mappings":";;;AAGA,SAAS,QAAQ,OAAO,UAAU,IAAI;AACpC,QAAM,OAAO,QAAQ,QAAQ,WAAU;AACvC,MAAI,MAAM;AACR,QAAI,CAAC,KAAK;AACR,aAAO,cAAc,MAAM,OAAO,OAAO;AAC3C,WAAO,KAAK,KAAK,OAAO,OAAO;AAAA,EAChC;AACH;AACA,SAAS,cAAc,MAAM,OAAO,UAAU,CAAA,GAAI;AAChD,QAAM,cAAc,IAAI,KAAK;AAC7B,QAAM,gBAAgB,IAAI,CAAA,CAAE;AAC5B,cAAY,MAAM;AAChB,kBAAc,QAAQ,YAAY,QAAQ,CAAA,IAAK,sBAAsB,KAAK;AAAA,EAC9E,CAAG;AACD,QAAM,QAAQ,KAAK,KAAK,cAAc,OAAO,OAAO;AACpD,QAAM,eAAe,CAAC,MAAM;AAC1B,UAAM,MAAM,CAAC;AAAA,EACjB,CAAG;AACU,qBAAqB;AAYhC,SAAO;AACT;ACeA,MAAM,sBAAsB;AAAA,EAC1B;AACF;AAAA,CACoC;AAAA,EAClC,eAAe,CAAC,GAAG,qBAAqB,GAAG,eAAe;AAC5D;","x_google_ignoreList":[0,1]}